diff --git a/node_modules/react-native-otp-entry/dist/OtpInput/OtpInput.js b/node_modules/react-native-otp-entry/dist/OtpInput/OtpInput.js
index c1c5e20..0ac1536 100644
--- a/node_modules/react-native-otp-entry/dist/OtpInput/OtpInput.js
+++ b/node_modules/react-native-otp-entry/dist/OtpInput/OtpInput.js
@@ -8,7 +8,7 @@ const VerticalStick_1 = require("./VerticalStick");
 const useOtpInput_1 = require("./useOtpInput");
 exports.OtpInput = (0, react_1.forwardRef)((props, ref) => {
     const { models: { text, inputRef, focusedInputIndex, hasCursor }, actions: { clear, handlePress, handleTextChange, focus, handleFocus, handleBlur }, forms: { setTextWithRef }, } = (0, useOtpInput_1.useOtpInput)(props);
-    const { disabled, numberOfDigits = 6, autoFocus = true, hideStick, focusColor = "#A4D0A4", focusStickBlinkingDuration, secureTextEntry = false, theme = {}, textInputProps, } = props;
+    const { disabled, numberOfDigits = 6, autoFocus = true, hideStick, focusColor = "#A4D0A4", focusStickBlinkingDuration, secureTextEntry = false, theme = {}, textInputProps, outerBorderFocusColor } = props;
     const { containerStyle, inputsContainerStyle, pinCodeContainerStyle, pinCodeTextStyle, focusStickStyle, focusedPinCodeContainerStyle, filledPinCodeContainerStyle, disabledPinCodeContainerStyle, } = theme;
     (0, react_1.useImperativeHandle)(ref, () => ({ clear, focus, setValue: setTextWithRef }));
     const generatePinCodeContainerStyle = (isFocusedInput, char) => {
@@ -34,13 +34,29 @@ exports.OtpInput = (0, react_1.forwardRef)((props, ref) => {
             .map((_, index) => {
             const char = text[index];
             const isFocusedInput = index === focusedInputIndex && !disabled && Boolean(hasCursor);
-            return (<react_native_1.Pressable key={`${char}-${index}`} disabled={disabled} onPress={handlePress} style={generatePinCodeContainerStyle(isFocusedInput, char)} testID="otp-input">
-                {isFocusedInput && !hideStick ? (<VerticalStick_1.VerticalStick focusColor={focusColor} style={focusStickStyle} focusStickBlinkingDuration={focusStickBlinkingDuration}/>) : (<react_native_1.Text style={[OtpInput_styles_1.styles.codeText, pinCodeTextStyle]}>
-                    {char && secureTextEntry ? "•" : char}
-                  </react_native_1.Text>)}
-              </react_native_1.Pressable>);
-        })}
+            const outerBorderColor = isFocusedInput ? outerBorderFocusColor : "transparent"
+            return (
+              <react_native_1.View style={{ padding: 2, borderWidth: 1.2, borderColor: outerBorderColor, borderRadius: 15 }}>
+                  <react_native_1.Pressable key={`${char}-${index}`} disabled={disabled} onPress={handlePress}
+                                            style={generatePinCodeContainerStyle(isFocusedInput, char)}
+                                            testID="otp-input">
+                      {isFocusedInput && !hideStick ? (
+                        <VerticalStick_1.VerticalStick focusColor={focusColor} style={focusStickStyle}
+                                                       focusStickBlinkingDuration={focusStickBlinkingDuration} />) : (
+                        <react_native_1.Text style={[OtpInput_styles_1.styles.codeText, pinCodeTextStyle]}>
+                            {char && secureTextEntry ? "•" : char}
+                        </react_native_1.Text>)}
+                  </react_native_1.Pressable>
+              </react_native_1.View>
+            );
+            })}
       </react_native_1.View>
-      <react_native_1.TextInput value={text} onChangeText={handleTextChange} maxLength={numberOfDigits} inputMode="numeric" keyboardType="numeric" textContentType="oneTimeCode" ref={inputRef} autoFocus={autoFocus} secureTextEntry={secureTextEntry} autoComplete={react_native_1.Platform.OS === "android" ? "sms-otp" : "one-time-code"} aria-disabled={disabled} editable={!disabled} testID="otp-input-hidden" onFocus={handleFocus} onBlur={handleBlur} {...textInputProps} style={[OtpInput_styles_1.styles.hiddenInput, textInputProps?.style]}/>
+        <react_native_1.TextInput value={text} onChangeText={handleTextChange} maxLength={numberOfDigits}
+                                  inputMode="numeric" keyboardType="numeric" textContentType="oneTimeCode"
+                                  ref={inputRef} autoFocus={autoFocus} secureTextEntry={secureTextEntry}
+                                  autoComplete={react_native_1.Platform.OS === "android" ? "sms-otp" : "one-time-code"}
+                                  aria-disabled={disabled} editable={!disabled} testID="otp-input-hidden"
+                                  onFocus={handleFocus} onBlur={handleBlur} {...textInputProps}
+                                  style={[OtpInput_styles_1.styles.hiddenInput, textInputProps?.style]}/>
     </react_native_1.View>);
 });
